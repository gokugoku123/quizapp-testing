{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Gokul\\\\Downloads\\\\Projects\\\\React\\\\Sample\\\\quiz-app\\\\src\\\\App.js\";\nimport { Component } from \"react\";\nimport Button from \"./components/UI/Button/Button\";\nimport Card from \"./components/UI/Card/Card\";\nimport * as questions from \"./Data/quizQuestions\";\nimport Banner from \"./components/UI/Banner/Banner\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      startQuiz: false,\n      questionSet: [],\n      questionsCorrect: 0,\n      questionsInTotal: 5,\n      totalTries: 0,\n      showResult: false\n    };\n\n    this.onEachTry = () => {\n      this.setState(prevState => ({\n        totalTries: prevState.totalTries + 1\n      }));\n    };\n\n    this.showEndResult = () => {\n      this.setState(prevState => ({\n        startQuiz: false,\n        showResult: true,\n        questionSet: [],\n        totalTries: 0\n      }));\n    };\n\n    this.onAnswerCorrect = () => {\n      if (this.state.questionsCorrect <= this.state.questionsInTotal) {\n        this.setState(prevState => {\n          return {\n            questionsCorrect: prevState.questionsCorrect + 1\n          };\n        });\n      }\n    };\n\n    this.onQuizToggler = () => {\n      this.setState({\n        startQuiz: true,\n        showResult: false,\n        questionsCorrect: 0,\n        totalTries: 0\n      });\n      this.startQuiz();\n    };\n\n    this.startQuiz = () => {\n      const newQuestions = questions.getRandomQuestions(5);\n      let QuestionCards = newQuestions.map((values, ind) => /*#__PURE__*/_jsxDEV(Card, {\n        question: values.question,\n        correctAnswerMarkUpdate: this.onAnswerCorrect,\n        attempt: this.onEachTry,\n        options: {\n          option1: values.option1,\n          option2: values.option2,\n          option3: values.option3,\n          option4: values.option4\n        },\n        answer: values.answer\n      }, values.questionId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 7\n      }, this));\n      this.setState({\n        questionSet: QuestionCards,\n        startQuiz: true\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"center\", {\n          children: \"Quizz App\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 14\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), this.state.showResult && /*#__PURE__*/_jsxDEV(Banner, {\n        children: [\"You have answered \", /*#__PURE__*/_jsxDEV(\"b\", {\n          children: [this.state.questionsCorrect, \" / \", this.state.questionsInTotal, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 62\n        }, this), \" Correctly\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 36\n      }, this), !this.state.startQuiz && /*#__PURE__*/_jsxDEV(Button, {\n        click: this.onQuizToggler,\n        children: \"Start Quiz\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 35\n      }, this), this.state.questionSet, this.state.totalTries === 5 ? /*#__PURE__*/_jsxDEV(Button, {\n        click: this.showEndResult,\n        children: \" Show Results \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 39\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Gokul/Downloads/Projects/React/Sample/quiz-app/src/App.js"],"names":["Component","Button","Card","questions","Banner","App","state","startQuiz","questionSet","questionsCorrect","questionsInTotal","totalTries","showResult","onEachTry","setState","prevState","showEndResult","onAnswerCorrect","onQuizToggler","newQuestions","getRandomQuestions","QuestionCards","map","values","ind","question","option1","option2","option3","option4","answer","questionId","render"],"mappings":"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","sourcesContent":["import { Component } from \"react\";\nimport Button from \"./components/UI/Button/Button\";\nimport Card from \"./components/UI/Card/Card\";\nimport * as questions from \"./Data/quizQuestions\";\nimport Banner from \"./components/UI/Banner/Banner\"\n\nclass App extends Component {\n\n  state = {\n    startQuiz : false,\n    questionSet : [],\n    questionsCorrect : 0,\n    questionsInTotal : 5,\n    totalTries : 0,\n    showResult : false\n  }\n\n  onEachTry = () => {\n    this.setState(prevState => (\n      {totalTries : prevState.totalTries + 1}\n    ));\n\n  }\n\n  showEndResult = () => {\n    \n    this.setState(prevState => (\n      {\n        startQuiz: false,\n        showResult : true,\n        questionSet: [],\n        totalTries : 0\n      }\n    ))\n  }\n\n  onAnswerCorrect = () => {\n    if(this.state.questionsCorrect <= this.state.questionsInTotal) {\n      this.setState(prevState => {\n        return {\n          questionsCorrect : prevState.questionsCorrect + 1\n        }\n      })\n    }\n  }\n\n  onQuizToggler = () => {\n    this.setState({startQuiz : true, showResult : false, questionsCorrect : 0, totalTries: 0});\n    this.startQuiz();\n  }\n\n  startQuiz = () => {\n    \n    const newQuestions = questions.getRandomQuestions(5);\n\n    let QuestionCards = newQuestions.map((values, ind) => (\n      <Card\n        key={values.questionId}\n        question={values.question}\n        correctAnswerMarkUpdate={this.onAnswerCorrect}\n        attempt={this.onEachTry}\n        options={{\n          option1: values.option1,\n          option2: values.option2,\n          option3: values.option3,\n          option4: values.option4\n        }}\n        answer={values.answer}\n      />\n    ))\n    this.setState({questionSet : QuestionCards, startQuiz : true})\n  }\n\n  \n\n  render() {\n\n    return (\n      <div>\n        <h1> <center>Quizz App</center> </h1>\n        {this.state.showResult &&  <Banner>You have answered <b>{this.state.questionsCorrect} / {this.state.questionsInTotal} </b> Correctly</Banner>}\n        {!this.state.startQuiz && <Button click = {this.onQuizToggler}>Start Quiz</Button>}\n        {this.state.questionSet}\n        {this.state.totalTries === 5? <Button click = {this.showEndResult}> Show Results </Button> : null}\n      </div>\n    )\n  }\n\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}