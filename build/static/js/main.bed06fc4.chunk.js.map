{"version":3,"sources":["components/UI/Banner/Banner.module.css","components/UI/Button/Button.js","components/UI/Card/Card.js","Data/quizQuestions.js","components/UI/Banner/Banner.js","App.js","reportWebVitals.js","index.js","components/UI/Button/Button.module.css","components/UI/Card/Card.module.css"],"names":["module","exports","Button","props","classList","classes","children","push","StartQuiz","ShowResult","className","join","disabled","onClick","click","Card","useState","options","answer","isOptionTrue","state","setState","checkAnswer","event","attempt","target","innerHTML","prevState","correctAnswerMarkUpdate","isUpdatedOnce","Object","keys","map","optionIndex","ind","question","questions","questionId","option1","option2","option3","option4","getRandomQuestions","questionCount","newQuestions","questionsGathered","randomId","length","i","Math","ceil","random","includes","console","log","Banner","App","startQuiz","questionSet","questionsCorrect","questionsInTotal","totalTries","showResult","onEachTry","showEndResult","onAnswerCorrect","onQuizToggler","QuestionCards","values","Container","Title","this","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bed06fc4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Banner\":\"Banner_Banner__3Lh-1\"};","import React from \"react\";\r\nimport classes from \"./Button.module.css\";\r\n\r\nconst Button = props => {\r\n    const classList = [classes.Button];\r\n    if(props.children === 'Start Quiz') {\r\n        classList.push(classes.StartQuiz);\r\n    }\r\n    if(props.children === 'Show Results') {\r\n        classList.push(classes.ShowResult);\r\n    }\r\n\r\n    return <button className={classList.join(' ')} disabled={props.disabled} onClick={props.click}>\r\n    {props.children}\r\n</button>\r\n} \r\n        \r\n\r\nexport default Button;","import React, { useEffect, useState } from \"react\";\r\nimport Button from \"../Button/Button\";\r\nimport classes from \"./Card.module.css\";\r\n\r\nconst Card = props => {\r\n    let [state, setState] = useState({\r\n        options : props.options,\r\n        answer : props.answer,\r\n        isOptionTrue : null\r\n    });\r\n\r\n    const logg = () => console.log(state);\r\n\r\n    const checkAnswer = (event) => {\r\n        props.attempt();\r\n        if(event.target.innerHTML === state.answer) {\r\n            setState( prevState => {\r\n                return {\r\n                    ...prevState,\r\n                    isOptionTrue : true\r\n                }\r\n            });\r\n            props.correctAnswerMarkUpdate();\r\n        }\r\n        \r\n        setState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                isUpdatedOnce : true\r\n            }\r\n        })\r\n    }\r\n\r\n    const options = Object.keys(props.options).map((optionIndex, ind) => {\r\n        return (\r\n            <Button disabled={state.isUpdatedOnce} click={checkAnswer} key={ind} >{props.options[optionIndex]}</Button>\r\n        )\r\n    });\r\n\r\n    return (\r\n        <div className={classes.Card}>\r\n            <h4> {props.question} </h4>\r\n            <div>\r\n                {options}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","const questions = [\r\n    {\r\n        questionId : 1,\r\n        question : \"Who is the father of our nation ?\",\r\n        option1 : \"Mahatma Gandhi\",\r\n        option2 : \"Jawaharlal Nehru\",\r\n        option3 : \"Donald Trump\",\r\n        option4 : \"Barrack Obama\",\r\n        answer : \"Mahatma Gandhi\"\r\n    },\r\n    {\r\n        questionId : 2,\r\n        question : \"What color is are the leaves ?\",\r\n        option1 : \"Blue\",\r\n        option2 : \"Red\",\r\n        option3 : \"Yellow\",\r\n        option4 : \"Green\",\r\n        answer : \"Green\"\r\n    },\r\n    {\r\n        questionId : 3,\r\n        question : \"What color is the sky ?\",\r\n        option1 : \"Blue\",\r\n        option2 : \"Red\",\r\n        option3 : \"Yellow\",\r\n        option4 : \"Green\",\r\n        answer : \"Blue\"\r\n    },\r\n    {\r\n        questionId : 4,\r\n        question : \"What color is the sky ?\",\r\n        option1 : \"Blue\",\r\n        option2 : \"Red\",\r\n        option3 : \"Yellow\",\r\n        option4 : \"Green\",\r\n        answer : \"Blue\"\r\n    },\r\n    {\r\n        questionId : 5,\r\n        question : \"What color is the fire ?\",\r\n        option1 : \"Blue\",\r\n        option2 : \"Red\",\r\n        option3 : \"Yellow\",\r\n        option4 : \"Green\",\r\n        answer : \"Red\"\r\n    },\r\n]\r\n\r\nexport const getRandomQuestions = (questionCount) => {\r\n\r\n    let newQuestions = [];\r\n    let questionsGathered = [];\r\n    let randomId = null;\r\n\r\n    if(questionCount > questions.length) {\r\n        questionCount = questions.length;\r\n    }\r\n    \r\n    for(let i = 1; i <= questionCount; ) {\r\n        randomId = Math.ceil( Math.random() * questionCount );\r\n        \r\n        if(!questionsGathered.includes(randomId) ) {\r\n            console.log(\"Random Id generated ===\", randomId);\r\n            questionsGathered.push(randomId);\r\n            console.log(\"QuestionFetch ===\", questions[randomId-1] );\r\n            newQuestions.push(questions[randomId-1]);\r\n            i++;\r\n        }\r\n    }\r\n    return newQuestions;\r\n}\r\n\r\n\r\nexport default questions;","import React from \"react\";\r\nimport classes from \"./Banner.module.css\"\r\nconst Banner = props => {\r\n\r\n    return (\r\n        <h2 className={classes.Banner} > {props.children} </h2>\r\n    )\r\n}\r\n\r\nexport default Banner;","import { Component } from \"react\";\nimport classes from \"./App.module.css\"\nimport Button from \"./components/UI/Button/Button\";\nimport Card from \"./components/UI/Card/Card\";\nimport * as questions from \"./Data/quizQuestions\";\nimport Banner from \"./components/UI/Banner/Banner\"\n\nclass App extends Component {\n\n  state = {\n    startQuiz : false,\n    questionSet : [],\n    questionsCorrect : 0,\n    questionsInTotal : 5,\n    totalTries : 0,\n    showResult : false\n  }\n\n  onEachTry = () => {\n    this.setState(prevState => (\n      {totalTries : prevState.totalTries + 1}\n    ));\n\n  }\n\n  showEndResult = () => {\n    \n    this.setState(prevState => (\n      {\n        startQuiz: false,\n        showResult : true,\n        questionSet: [],\n        totalTries : 0\n      }\n    ))\n  }\n\n  onAnswerCorrect = () => {\n    if(this.state.questionsCorrect <= this.state.questionsInTotal) {\n      this.setState(prevState => {\n        return {\n          questionsCorrect : prevState.questionsCorrect + 1\n        }\n      })\n    }\n  }\n\n  onQuizToggler = () => {\n    this.setState({startQuiz : true, showResult : false, questionsCorrect : 0, totalTries: 0});\n    this.startQuiz();\n  }\n\n  startQuiz = () => {\n    \n    const newQuestions = questions.getRandomQuestions(5);\n\n    let QuestionCards = newQuestions.map((values, ind) => (\n      <Card\n        key={values.questionId}\n        question={values.question}\n        correctAnswerMarkUpdate={this.onAnswerCorrect}\n        attempt={this.onEachTry}\n        options={{\n          option1: values.option1,\n          option2: values.option2,\n          option3: values.option3,\n          option4: values.option4\n        }}\n        answer={values.answer}\n      />\n    ))\n    this.setState({questionSet : QuestionCards, startQuiz : true})\n  }\n\n  \n\n  render() {\n\n    return (\n      <div className={classes.Container}>\n        <h1 className={classes.Title}> <center>Quizz App</center> </h1>\n        {this.state.showResult &&  <Banner> You have answered <b> {this.state.questionsCorrect} / {this.state.questionsInTotal} </b> Correctly </Banner>}\n        {!this.state.startQuiz && <Button click = {this.onQuizToggler}>Start Quiz</Button>}\n        {this.state.questionSet}\n        {this.state.totalTries === 5? <Button click = {this.showEndResult}> Show Results </Button> : null}\n      </div>\n    )\n  }\n\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__2rzek\",\"StartQuiz\":\"Button_StartQuiz__16ySG\",\"ShowResult\":\"Button_ShowResult__2EFMs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Card\":\"Card_Card__19Rba\"};"],"sourceRoot":""}